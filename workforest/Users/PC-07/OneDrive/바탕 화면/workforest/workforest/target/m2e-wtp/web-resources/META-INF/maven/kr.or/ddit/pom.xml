<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>kr.or</groupId>
   <artifactId>ddit</artifactId>
   <name>springProj</name>
   <packaging>war</packaging>
   <version>1.0.0-BUILD-SNAPSHOT</version>
   <properties>
      <java-version>1.8</java-version>
      <org.springframework-version>5.2.5.RELEASE</org.springframework-version>
      <org.aspectj-version>1.6.10</org.aspectj-version>
      <org.slf4j-version>1.6.6</org.slf4j-version>
   </properties>
   <dependencies>
      <!-- Spring -->
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-context</artifactId>
         <version>${org.springframework-version}</version>
         <exclusions>
            <!-- Exclude Commons Logging in favor of SLF4j -->
            <exclusion>
               <groupId>commons-logging</groupId>
               <artifactId>commons-logging</artifactId>
             </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-webmvc</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
            
      <!-- AspectJ -->
      <dependency>
         <groupId>org.aspectj</groupId>
         <artifactId>aspectjrt</artifactId>
         <version>${org.aspectj-version}</version>
      </dependency>   
      
      <!-- Logging -->
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
         <version>${org.slf4j-version}</version>
      </dependency>
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>jcl-over-slf4j</artifactId>
         <version>${org.slf4j-version}</version>
         <scope>runtime</scope>
      </dependency>
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-log4j12</artifactId>
         <version>${org.slf4j-version}</version>
         <scope>runtime</scope>
      </dependency>
      <dependency>
         <groupId>log4j</groupId>
         <artifactId>log4j</artifactId>
         <version>1.2.15</version>
         <exclusions>
            <exclusion>
               <groupId>javax.mail</groupId>
               <artifactId>mail</artifactId>
            </exclusion>
            <exclusion>
               <groupId>javax.jms</groupId>
               <artifactId>jms</artifactId>
            </exclusion>
            <exclusion>
               <groupId>com.sun.jdmk</groupId>
               <artifactId>jmxtools</artifactId>
            </exclusion>
            <exclusion>
               <groupId>com.sun.jmx</groupId>
               <artifactId>jmxri</artifactId>
            </exclusion>
         </exclusions>
         <scope>runtime</scope>
      </dependency>

      <!-- @Inject -->
      <dependency>
         <groupId>javax.inject</groupId>
         <artifactId>javax.inject</artifactId>
         <version>1</version>
      </dependency>
            
      <!-- Servlet -->
      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>servlet-api</artifactId>
         <version>2.5</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>javax.servlet.jsp</groupId>
         <artifactId>jsp-api</artifactId>
         <version>2.1</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>jstl</artifactId>
         <version>1.2</version>
      </dependency>
   
      <!-- Test -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>4.7</version>
         <scope>test</scope>
      </dependency> 
      
      <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
      <!-- 
         1) 자바빈 클래스(VO)의 getter/setter메소드, toString 자동처리
         2) log.info() 메소드로 sysout대신 로그를 console에 출력
         
         1. 개요
메이븐을 사용하게 되면 POM 파일을 다뤄야 합니다. 
POM은 Project Object Model의 약자인데... 
pom.xml이라는 파일이 바로 POM 파일이고 이 파일을 통해 dependency라고 부르는 의존성 설정을 하게 됩니다...
그리고 각 dependency는 scope을 가지고 있어요...
종류는 compile, runtime, provided 등의 종류가 있지요...
2. compile
compile은 컴파일때 필요한 것입니다... 기본값이기 때문에 만일 scope 설정을 안하면 compile이 기본입니다...

3. runtime
runtime은 런타임때 필요한 것입니다. 컴파일할 때는 필요가 없지만 실행할 때는 필요한 것이지요.
JDBC 드라이버 같은게 되겠습니다.

4. provided
provided는 컴파일때 필요하긴 하지만 런타임때는 JDK 혹은 컨테이너가 제공하는 것입니다.
마지막 패키징 시 포함되지 않음
서블릿이나 JSP 관련 API 같은거죠. 
즉 WAS에서 제공하는 servlet-api.jar를 사용하는 경우 (대부분이겠죠) 입니다.
만약 운영환경에서 servlet-api.jar 중복으로 인한 문제가 발생한다면 꼭 provided로 바꿔주셔야 합니다.

5. test
test는 조금 특별한데 테스트 코드를 컴파일할때 필요하지만 배포때는 제외가 됩니다. (따라서 굳이 운영 환경에 JUnit 의존성을 삭제할 필요가 없어요)
easymock, JUnit 같은거죠.

6. system
system은 provided와 유사하지만 JAR 파일을 직접 사용합니다...
이 때는 JAR 파일의 위치를 지정하는 systemPath 엘리먼트가 따라와야 해요...
       -->
      <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
          <version>1.18.22</version>
      </dependency>       
      
      <!-- Database 라이브러리 시작 -->
      <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
      <!-- XML로 쿼리를 작성하게 해주는 라이브러리 ORM-->
      <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis</artifactId>
          <version>3.5.10</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
      <!-- 스프링과 mybatis를 연동하게 해주는 라이브러리 -->
      <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis-spring</artifactId>
          <version>2.0.4</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
      <!-- 스프링에서 JDBC(Java DataBase Connectivitiy) -->
      <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>${org.springframework-version}</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
      <!-- dbcp : database connection pool => 커넥션객체를 미리 만들어놓고 쓰고/반납 
               최근에는 hikaricp를 사용하는 경우도 있음
      -->
      <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-dbcp2</artifactId>
          <version>2.7.0</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
      <!-- 로깅을 위한 라이브러리. 쿼리를 console이나 파일 로그로 볼 수 있음 -->
      <dependency>
          <groupId>org.bgee.log4jdbc-log4j2</groupId>
          <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
          <version>1.16</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc6 -->
      <!-- ojdbc6 : oracle java database connectivity 드라이버 -->
      <dependency>
          <groupId>com.oracle.database.jdbc</groupId>
          <artifactId>ojdbc6</artifactId>
          <version>11.2.0.4</version>
      </dependency>
      <!-- Database 라이브러리 끝 -->
      <!-- 타일즈 시작 -->
      <!-- https://mvnrepository.com/artifact/org.apache.tiles/tiles-extras -->
      <dependency>
          <groupId>org.apache.tiles</groupId>
          <artifactId>tiles-extras</artifactId>
          <version>3.0.8</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/org.apache.tiles/tiles-servlet -->
      <dependency>
          <groupId>org.apache.tiles</groupId>
          <artifactId>tiles-servlet</artifactId>
          <version>3.0.8</version>
      </dependency>
            
      <!-- https://mvnrepository.com/artifact/org.apache.tiles/tiles-jsp -->
      <dependency>
          <groupId>org.apache.tiles</groupId>
          <artifactId>tiles-jsp</artifactId>
          <version>3.0.8</version>
      </dependency>
      <!-- 타일즈 끝 -->
      
      <!-- 입력값을 검증하기 위한 라이브러리 의존 관계 정의 시작 
      스프링 
      M(Model) : Service, ServiceImple, Mapper
      V(View) : JSP
      C(Controller) : Controller 
      Bean(자바빈 클래스, ArticleVO) Validation(유효성검사) 기능을 이용해 
      요청 파라미터 값이 바인딩된(멤버변수에 세팅된) 도메인 클래스(ArticleVO)의 입력값 검증을 함
      요청 파라미터 : ?articleNo=112&title=개똥이
      public String write(골뱅이ModelAttribute ArticleVO articleVO)
      -->
      <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator -->
       <dependency>
             <groupId>org.hibernate</groupId>
             <artifactId>hibernate-validator</artifactId>
             <version>5.2.5.Final</version>
       </dependency>

      <!-- 입력값을 검증하기 위한 라이브러리 의존 관계 정의 끝 -->
      
      <!-- json 데이터 바인딩을 위한 의존 라이브러리 시작 -->
      <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
      <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.13.3</version>
      </dependency>
      <!-- json 데이터 바인딩을 위한 의존 라이브러리 끝 -->
      <!-- JSON타입의 String을 JSON으로 변환 시 사용 시작 -->   
      <!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
      <dependency>
          <groupId>com.googlecode.json-simple</groupId>
          <artifactId>json-simple</artifactId>
          <version>1.1.1</version>
      </dependency>
      <!-- JSON타입의 String을 JSON으로 변환 시 사용 끝 -->      
      <!-- 스프링 시큐리티 라이브러리 의존관계 정의 시작 -->
      <!-- 스프링 시큐리티를 웹에서 동작하도록 해줌 -->
      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
      <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-web</artifactId>
          <version>5.0.7.RELEASE</version>
      </dependency>
      
      <!-- 스프링 시큐리티 설정을 도와줌 -->
      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
      <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-config</artifactId>
          <version>5.0.7.RELEASE</version>
      </dependency>
      
      <!-- 스프링 시큐리티 일반 기능 -->
      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
      <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-core</artifactId>
          <version>5.0.7.RELEASE</version>
      </dependency>
      
     
      
      
      <!-- 스프링 시큐리티와 태그라이브러리를 연결해줌 -->
      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
      <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-taglibs</artifactId>
          <version>5.0.7.RELEASE</version>
      </dependency>
      <!-- 스프링 시큐리티 라이브러리 의존관계 정의 시작 -->   
      <!-- 파일업로드 시작  -->
      <!-- common-fileupload 라이브러리는 tomcat7.0버전 이후로는
         서블릿3.0이상에서 지원함
       -->
      <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
      <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>3.1.0</version>
          <scope>provided</scope>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
      <dependency>
          <groupId>commons-fileupload</groupId>
          <artifactId>commons-fileupload</artifactId>
          <version>1.4</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
      <dependency>
          <groupId>commons-io</groupId>
          <artifactId>commons-io</artifactId>
          <version>2.11.0</version>
      </dependency>
      
      
      
      
      
      <!-- 썸네일 -->
      <!-- https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib -->
      <dependency>
          <groupId>org.imgscalr</groupId>
          <artifactId>imgscalr-lib</artifactId>
          <version>4.2</version>
      </dependency>
      
      <!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
      <dependency>
          <groupId>net.coobird</groupId>
          <artifactId>thumbnailator</artifactId>
          <version>0.4.8</version>
      </dependency>
      <!-- 파일업로드 끝  -->
      <!-- AOP(Aspect Oriented Programming : 관점 지향 프로그래밍) 시작 
      1) aspectjrt => 이미 있으므로 생략
      2) aspectjweaver => 없으므로 의존 관계를 정의
      -->
      <!-- https://mvnrepository.com/artifact/aspectj/aspectjweaver
      1.5.4 -->
         
      <!-- AspectJ Weaver -->
      <dependency>
          <groupId>org.aspectj</groupId>
          <artifactId>aspectjweaver</artifactId>
          <version>${org.aspectj-version}</version>
      </dependency>
      <!-- AspectJ Tools -->
      <dependency>
          <groupId>org.aspectj</groupId>
          <artifactId>aspectjtools</artifactId>
          <version>${org.aspectj-version}</version>
      </dependency>
      <!-- AOP(Aspect Oriented Programming : 관점 지향 프로그래밍) 끝 -->
   <dependency>
		    <groupId>org.apache.poi</groupId>
		    <artifactId>poi</artifactId>
		    <version>5.0.0</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.poi</groupId>
		    <artifactId>poi-ooxml</artifactId>
		    <version>5.0.0</version>
		</dependency>
  
   </dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>