<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- customAccessDenied 빈 객체 -->
	<bean id="customAccessDenied" class="com.team1.workforest.security.CustomAccessDeniedHandler"></bean>
	
	<bean id="customLoginSuccess" class="com.team1.workforest.security.CustomLoginSuccessHandler"></bean>
	<!-- 1. 비밀번호를 암호화하는 것을 사용자 정의로 처리해보자 -->
	<!-- <bean id="customPasswordEncoder" class="com.team1.workforest.security.CustomNoOpPasswordEncoder"></bean> -->
	
	<!-- 2. 비밀번호 암호화 사용 -->
	<bean id="passwordEncoder" 
	      class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
	<!-- 사용자가 이미 정해놓은 테이블과 컬럼명으로 로그인 처리를 해보자 -->
	<bean id="customUserDetailsService" class="com.team1.workforest.security.CustomUserDetailsService"></bean>
	
	<security:http> <!-- xmlns:security= -> security붙은 태그들? 활성화 -->
		<!-- URI패턴으로 접근 제한을 설정 -->
		<security:intercept-url pattern="/brd/list" access="permitAll" />
		<!-- <security:intercept-url pattern="/brd/register" access="hasRole('ROLE_MEMBER')" /> -->
		<security:intercept-url pattern="/notice/list" access="permitAll" />
		<!-- <security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')" /> -->
		<!-- 도서 등록 : /create -->
		<!-- <security:intercept-url pattern="/create" access="hasRole('ROLE_ADMIN')" /> -->
		
		<!-- Lprod -->
		<security:intercept-url pattern="/lprod/list" access="permitAll" />

		<!-- Stud -->
		<security:intercept-url pattern="/stud/list" access="permitAll" />
		<security:intercept-url pattern="/stud/detail" access="permitAll" />
		<security:intercept-url pattern="/stud/create" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 폼 기반 인증 기능 사용 (인증-authentication을 위해서 아이디, 비밀번호를 체크)-->
		<!-- <security:form-login/> -->
		<!-- 사용자 정의 로그인 페이지의 URI 지정 -->
		<!-- 로그인 성공 처리자 -->
		<!-- ref: bean을 바라봄 -->
		<security:form-login login-page="/login" 
		authentication-success-handler-ref="customLoginSuccess" />
	
		<!-- 접근 거부 처리자 -->
		<!-- <security:access-denied-handler error-page="/accessError" /> -->
		<!-- 접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고자 할 때 사용자가 직접 구현할 수 있음 -->
		<security:access-denied-handler ref="customAccessDenied" />
		<!-- 빈 객체를 ref한다는 뜻 -> 빈 객체에 customAccessDenied등록해야 함 -->
		
		<!-- dataSource를 통해 지정한 Database의 
		 약속된 테이블(PERSISTENT_LOGINS)을 이용하여 기존 로그인 정보를 기록함 -->
        <!-- token-validity-seconds : 쿠키의 유효시간(초) 604800초는 7일 -->
		<security:remember-me data-source-ref="dataSource"
		token-validity-seconds="604800" />
		
		
		<!-- 로그아웃처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화 함 -->
		<security:logout logout-url="/logout" invalidate-session="true"
		delete-cookies="remember-me,JSESSION_ID" />
		
	</security:http>
	
	<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정 -->
	<!-- 
	<security:user name="member" password="java" authorities="ROLE_MEMBER" />
	스프링 시큐리니티 5부터 기본적으로 PasswordEncoder를 지정해야 하는데,
            그 이유는 사용자 테이블(USERS)에 비밀번호를 암호화하여 저장해야 하므로..
            우리는 우선 비밀번호를 암호화 처리 하지 않았으므로
            암호화 하지 않는 PasswordEncoder를 직접 구현하여 지정하기로 함
    -->
	<security:authentication-manager> <!-- 인증을 관리하는 애 -->
		<security:authentication-provider user-service-ref="customUserDetailsService"> <!-- 인증 처리 제공 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> --> <!-- db접속 -->
			
			<!-- <security:user-service> 사용자 제공
				 <security:user name="member" password="{noop}java" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}java" 
				               authorities="ROLE_MEMBER,ROLE_ADMIN" /> 
			</security:user-service> -->
			
			<!-- 1. 비밀번호 암호화 안씀 -->
			<!-- <security:password-encoder ref="customPasswordEncoder" /> -->
			
			<!-- 2. 비밀번호 암호화 씀 -->
			<security:password-encoder ref="passwordEncoder" />	
		</security:authentication-provider>
	</security:authentication-manager>


</beans>

